{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kultivator","text":"<p>An Automated Knowledge Synthesis Engine</p> <p>Kultivator is an intelligent system that connects to hierarchical note-taking applications, processes your notes using local AI, and cultivates them into a structured, cross-referenced wiki. Think of it as your personal knowledge gardener that helps your ideas grow and interconnect.</p>"},{"location":"#simple-usage-example","title":"\ud83d\udea6 Simple Usage Example","text":"<p>Kultivator supports two types of Logseq databases: - Modern Logseq (EDN): Uses a <code>db.edn</code> file (recent Logseq versions) - Classic Logseq (Legacy EDN): Uses a <code>logseq.edn</code> file (older Logseq versions)</p> <p>Kultivator will automatically detect which importer to use based on the files present in your Logseq export directory.</p>"},{"location":"#1-bootstrap-your-knowledge-base-first-time","title":"1. Bootstrap your knowledge base (first time)","text":"<pre><code>python main.py --importer logseq --bootstrap --logseq-path /path/to/your/logseq/export\n</code></pre> <ul> <li>This will process all your Logseq notes (whether classic or modern), create a <code>wiki/</code> directory, and initialize versioning.</li> </ul>"},{"location":"#2-incremental-update-daily-use","title":"2. Incremental update (daily use)","text":"<pre><code>python main.py --importer logseq --logseq-path /path/to/your/logseq/export\n</code></pre> <ul> <li>This will process only new or changed notes and update your wiki accordingly.</li> </ul> <p>Tip: - For modern Logseq, ensure your export contains a <code>db.edn</code> file. - For classic Logseq, ensure your export contains a <code>logseq.edn</code> file. - Kultivator will choose the correct importer automatically\u2014no extra configuration needed!</p>"},{"location":"agent_system/","title":"Enhanced AI Agent System","text":"<p>The Kultivator AI agent system has been significantly improved to provide better flexibility, easier customization, and support for specialized agents. This document describes the new features and how to use them.</p>"},{"location":"agent_system/#overview","title":"Overview","text":"<p>The enhanced system introduces:</p> <ol> <li>Configuration-based agents: Define agents in <code>config.yaml</code> instead of code</li> <li>Template system: Dynamic user prompt generation with variables</li> <li>Specialized agents: Pre-configured agents for specific domains (tasks, travel, etc.)</li> <li>Agent validation: Validate agent definitions for correctness</li> <li>Backward compatibility: Existing code continues to work</li> </ol>"},{"location":"agent_system/#key-components","title":"Key Components","text":""},{"location":"agent_system/#agentmanager","title":"AgentManager","text":"<p>Central manager for configuration-based agents with template support.</p>"},{"location":"agent_system/#agentdefinition","title":"AgentDefinition","text":"<p>Data structure representing a complete agent configuration loaded from YAML.</p>"},{"location":"agent_system/#template-system","title":"Template System","text":"<p>Dynamic prompt generation using Python's <code>str.format()</code> method with <code>{variable}</code> syntax.</p>"},{"location":"agent_system/#configuration","title":"Configuration","text":""},{"location":"agent_system/#basic-agent-structure","title":"Basic Agent Structure","text":"<pre><code>agents:\n  definitions:\n    my_agent:\n      description: \"Brief description of the agent\"\n      system_prompt: |\n        Multi-line system prompt that defines the agent's role,\n        capabilities, and behavior guidelines.\n      user_prompt_template: |\n        Template for user prompts with {variables} that will be\n        replaced with actual values at runtime.\n      available_tools: [\"list_entities\", \"get_entity_context\"]\n      requires_database: true\n      timeout: 30.0\n</code></pre>"},{"location":"agent_system/#template-variables","title":"Template Variables","text":"<p>Common template variables available:</p> <ul> <li><code>{content}</code>: Raw content from the block</li> <li><code>{entity_name}</code>: Name of the entity being processed</li> <li><code>{entity_type}</code>: Type of entity (person, project, etc.)</li> <li><code>{source_ref}</code>: Reference to the source block</li> <li><code>{created_at}</code>: Creation timestamp</li> <li><code>{updated_at}</code>: Last updated timestamp</li> <li><code>{current_time}</code>: Current processing time</li> <li><code>{context_info}</code>: Knowledge base context</li> <li><code>{existing_content}</code>: Existing content for merge operations</li> <li><code>{summary}</code>: Summary of new information</li> </ul>"},{"location":"agent_system/#pre-configured-specialized-agents","title":"Pre-configured Specialized Agents","text":""},{"location":"agent_system/#task-manager-task_manager","title":"Task Manager (<code>task_manager</code>)","text":"<p>Specialized for organizing and tracking tasks and project information.</p> <p>Capabilities: - Extract tasks, deadlines, and priorities - Identify project dependencies and relationships - Create structured task lists and project overviews - Track task status and progress - Suggest task categorization and prioritization</p> <p>Use cases: - Project management notes - Task tracking and organization - Deadline management - Progress tracking</p>"},{"location":"agent_system/#travel-planner-travel_planner","title":"Travel Planner (<code>travel_planner</code>)","text":"<p>Specialized for travel information organization and itinerary planning.</p> <p>Capabilities: - Extract travel dates, destinations, and activities - Create structured itineraries and travel plans - Identify travel-related entities (places, accommodations, activities) - Organize travel information by trip or destination - Track travel expenses and bookings</p> <p>Use cases: - Travel planning and itineraries - Trip organization - Travel expense tracking - Destination information management</p>"},{"location":"agent_system/#usage-examples","title":"Usage Examples","text":""},{"location":"agent_system/#basic-agent-usage","title":"Basic Agent Usage","text":"<pre><code>from kultivator.agents import agent_manager, AgentRunner\n\n# List available agents\nagents = agent_manager.list_agents()\nprint(\"Available agents:\", agents)\n\n# Get agent definition\nagent_def = agent_manager.get_agent_definition(\"task_manager\")\nprint(\"Description:\", agent_def.description)\n\n# Validate agent\nvalidation = agent_manager.validate_agent_definition(\"task_manager\")\nif validation['valid']:\n    print(\"Agent is valid\")\nelse:\n    print(\"Errors:\", validation['errors'])\n</code></pre>"},{"location":"agent_system/#template-rendering","title":"Template Rendering","text":"<pre><code># Render a user prompt\ntemplate_vars = {\n    'content': 'Meeting with John about project deadlines',\n    'entity_name': 'Project Alpha',\n    'entity_type': 'project',\n    'source_ref': 'notes/2024-01-15.md'\n}\n\nprompt = agent_manager.render_user_prompt(\"task_manager\", **template_vars)\nprint(\"Rendered prompt:\", prompt)\n</code></pre>"},{"location":"agent_system/#using-specialized-agents","title":"Using Specialized Agents","text":"<pre><code>from kultivator.agents.runner import AgentRunner\nfrom kultivator.models import Entity, CanonicalBlock\n\n# Create test data\nentity = Entity(name=\"European Trip\", entity_type=\"travel\")\nblock = CanonicalBlock(\n    block_id=\"travel-1\",\n    content=\"Flight to Paris on March 15, hotel booking at Hotel Louvre\",\n    source_ref=\"travel/europe-2024.md\",\n    created_at=1234567890,\n    updated_at=1234567890\n)\n\n# Run specialized agent\nrunner = AgentRunner(database_manager=db)\ncontent = runner.run_specialized_agent(\n    \"travel_planner\",\n    entity,\n    \"New travel information\",\n    block\n)\nprint(\"Generated content:\", content)\n</code></pre>"},{"location":"agent_system/#adding-custom-agents","title":"Adding Custom Agents","text":""},{"location":"agent_system/#1-define-in-configuration","title":"1. Define in Configuration","text":"<p>Add to <code>config.yaml</code>:</p> <pre><code>agents:\n  definitions:\n    finance_manager:\n      description: \"Manages financial information and expense tracking\"\n      system_prompt: |\n        You are a financial management assistant. Your role is to organize\n        financial information, track expenses, and provide financial insights.\n\n        Your capabilities:\n        1. Extract financial data from notes\n        2. Categorize expenses and income\n        3. Create financial summaries and reports\n        4. Track budgets and financial goals\n        5. Identify financial trends and patterns\n\n        Always provide clear, accurate financial information in Markdown format.\n      user_prompt_template: |\n        Analyze this financial content:\n\n        Content: {content}\n        Source: {source_ref}\n        Entity Name: {entity_name}\n        Entity Type: {entity_type}\n\n        KNOWLEDGE BASE CONTEXT:\n        {context_info}\n\n        Create a structured financial page with:\n        - Income and expense categorization\n        - Budget tracking\n        - Financial goals and progress\n        - Spending patterns and insights\n      available_tools: [\"list_entities\", \"get_entity_context\"]\n      requires_database: true\n      timeout: 30.0\n</code></pre>"},{"location":"agent_system/#2-use-the-custom-agent","title":"2. Use the Custom Agent","text":"<pre><code># The agent is automatically available after config reload\nagent_manager.reload_definitions()\n\n# Validate the new agent\nvalidation = agent_manager.validate_agent_definition(\"finance_manager\")\nif validation['valid']:\n    print(\"Custom agent is ready to use!\")\n\n# Use the agent\nrunner = AgentRunner(database_manager=db)\ncontent = runner.run_specialized_agent(\n    \"finance_manager\",\n    entity,\n    \"Monthly expenses summary\",\n    block\n)\n</code></pre>"},{"location":"agent_system/#agent-validation","title":"Agent Validation","text":"<p>The system includes comprehensive validation:</p> <pre><code># Validate an agent definition\nvalidation = agent_manager.validate_agent_definition(\"my_agent\")\n\nprint(\"Valid:\", validation['valid'])\nprint(\"Errors:\", validation['errors'])\nprint(\"Warnings:\", validation['warnings'])\n</code></pre>"},{"location":"agent_system/#validation-checks","title":"Validation Checks","text":"<ul> <li>Required fields: Description, system_prompt, user_prompt_template</li> <li>Empty prompts: System prompt and template cannot be empty</li> <li>Template variables: Checks for recommended variables</li> <li>Tool availability: Warns about unknown tools</li> <li>Timeout values: Must be positive</li> <li>Agent existence: Verifies agent exists in configuration</li> </ul>"},{"location":"agent_system/#migration-guide","title":"Migration Guide","text":""},{"location":"agent_system/#from-hard-coded-agents","title":"From Hard-coded Agents","text":"<p>Old approach:</p> <pre><code># Hard-coded in registry.py\nagent_registry.register_agent(AgentConfig(\n    name=\"my_agent\",\n    description=\"My agent\",\n    system_prompt=\"You are my agent...\",\n    # ... other config\n))\n</code></pre> <p>New approach:</p> <pre><code># In config.yaml\nagents:\n  definitions:\n    my_agent:\n      description: \"My agent\"\n      system_prompt: \"You are my agent...\"\n      user_prompt_template: \"Process: {content}\"\n      # ... other config\n</code></pre>"},{"location":"agent_system/#updating-existing-code","title":"Updating Existing Code","text":"<p>The new system is backward compatible. Existing code will continue to work, but you can gradually migrate to the new system:</p> <ol> <li>Move agent definitions from code to <code>config.yaml</code></li> <li>Use <code>agent_manager</code> instead of <code>agent_registry</code> for new features</li> <li>Leverage template system for dynamic prompts</li> <li>Use specialized agents where appropriate</li> </ol>"},{"location":"agent_system/#best-practices","title":"Best Practices","text":""},{"location":"agent_system/#1-agent-design","title":"1. Agent Design","text":"<ul> <li>Clear purpose: Each agent should have a specific, well-defined purpose</li> <li>Comprehensive prompts: Include detailed instructions and examples</li> <li>Proper tools: Only include tools the agent actually needs</li> <li>Reasonable timeouts: Set appropriate timeouts for agent complexity</li> </ul>"},{"location":"agent_system/#2-template-design","title":"2. Template Design","text":"<ul> <li>Descriptive variables: Use clear, descriptive variable names</li> <li>Consistent format: Maintain consistent template structure</li> <li>Required vs optional: Clearly distinguish required from optional variables</li> <li>Fallback handling: Consider what happens with missing variables</li> </ul>"},{"location":"agent_system/#3-configuration-management","title":"3. Configuration Management","text":"<ul> <li>Version control: Keep config.yaml in version control</li> <li>Validation: Always validate agents after configuration changes</li> <li>Documentation: Document custom agents and their intended use</li> <li>Testing: Test custom agents thoroughly before deployment</li> </ul>"},{"location":"agent_system/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agent_system/#common-issues","title":"Common Issues","text":"<ol> <li>Template rendering errors: Check variable names and availability</li> <li>Agent not found: Verify agent name in configuration</li> <li>Validation failures: Check required fields and syntax</li> <li>Import errors: Ensure proper imports and module structure</li> </ol>"},{"location":"agent_system/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging to see detailed agent execution:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Now run your agent code\n</code></pre>"},{"location":"agent_system/#validation-tool","title":"Validation Tool","text":"<p>Use the validation tool to check agent definitions:</p> <pre><code>from kultivator.agents import agent_manager\n\n# Validate all agents\nfor agent_name in agent_manager.list_agents():\n    validation = agent_manager.validate_agent_definition(agent_name)\n    if not validation['valid']:\n        print(f\"Agent {agent_name} has issues:\")\n        for error in validation['errors']:\n            print(f\"  Error: {error}\")\n        for warning in validation['warnings']:\n            print(f\"  Warning: {warning}\")\n</code></pre>"},{"location":"agent_system/#future-enhancements","title":"Future Enhancements","text":"<p>The new system provides a foundation for future enhancements:</p> <ol> <li>Multi-language support: Different prompts for different languages</li> <li>Agent plugins: Pluggable agent systems</li> <li>Advanced templates: More sophisticated templating features</li> <li>Agent chaining: Chain multiple agents together</li> <li>Performance optimization: Caching and optimization features</li> </ol>"},{"location":"agent_system/#conclusion","title":"Conclusion","text":"<p>The enhanced AI agent system provides a more flexible, maintainable, and extensible approach to AI agent management in Kultivator. By moving configuration out of code and into YAML files, users can easily customize and extend the system without modifying the codebase.</p> <p>The specialized agents (task management, travel planning) demonstrate the power of this approach, while the template system enables dynamic prompt generation for various use cases.</p> <p>This system maintains backward compatibility while providing a clear path forward for future enhancements and customizations.</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#importers-kultivatorimporters","title":"Importers (<code>kultivator/importers/</code>)","text":"<ul> <li>MockImporter: For testing and examples</li> <li>LogseqEDNImporter: Parses Logseq EDN/JSON exports</li> <li>Extensible: Add new importers for other note-taking apps</li> </ul>"},{"location":"architecture/#ai-agents-kultivatoragents","title":"AI Agents (<code>kultivator/agents/</code>)","text":"<ul> <li>AgentManager: Manages agents defined in <code>config.yaml</code>.</li> <li>Configuration-based Agents: Agents are defined in <code>config.yaml</code>, allowing for easy customization.</li> <li>Template System: User prompts are generated from templates with dynamic variables.</li> <li>Specialized Agents: Pre-configured agents for tasks, travel, and more.</li> </ul>"},{"location":"architecture/#database-kultivatordatabase","title":"Database (<code>kultivator/database/</code>)","text":"<ul> <li>DuckDB-based: Fast, serverless SQL database</li> <li>Entity tracking: Stores discovered entities and relationships</li> <li>Change detection: SHA-256 hashing for efficient updates</li> </ul>"},{"location":"architecture/#versioning-kultivatorversioning","title":"Versioning (<code>kultivator/versioning/</code>)","text":"<ul> <li>Git integration: Automatic commits and version tracking</li> <li>Atomic updates: Each entity change is a separate commit</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<pre><code>Notes \u2192 Importer \u2192 CanonicalBlock \u2192 Triage Agent \u2192 Entities\n                                                       \u2193\nWiki \u2190 Synthesizer Agent \u2190 Database \u2190 Entity Processing\n</code></pre>"},{"location":"architecture/#agent-architecture","title":"Agent Architecture","text":"<p>Kultivator's agent architecture is designed for flexibility and ease of customization. All agents are defined in <code>config.yaml</code> and managed by the <code>AgentManager</code>.</p> <ul> <li>Agent Definitions: Each agent is defined with a system prompt, a user prompt template, available tools, and other settings.</li> <li>Template System: User prompts are dynamically rendered using a template system that injects context-specific variables.</li> <li>Specialized Agents: The system comes with pre-configured agents for common tasks like <code>task_manager</code> and <code>travel_planner</code>.</li> <li>Custom Agents: New agents can be added by simply defining them in the <code>config.yaml</code> file.</li> </ul> <p>For a detailed explanation of the agent system, see the Agent System Documentation.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Kultivator is configured using the <code>config.yaml</code> file.</p>"},{"location":"configuration/#ai-settings","title":"AI Settings","text":"<ul> <li><code>ai.ollama_host</code>: Ollama server URL</li> <li><code>ai.model</code>: Model name (gemma3, llama3.2, etc.)</li> <li><code>ai.timeout</code>: Request timeout in seconds</li> </ul>"},{"location":"configuration/#agent-settings-agents","title":"Agent Settings (<code>agents</code>)","text":"<p>The <code>agents</code> section in <code>config.yaml</code> is used to define and configure all AI agents.</p> <ul> <li><code>agents.definitions</code>: This is a dictionary containing the definitions of all available agents. Each agent is defined by its name (e.g., <code>task_manager</code>).</li> </ul>"},{"location":"configuration/#agent-definition","title":"Agent Definition","text":"<p>Each agent definition has the following properties:</p> <ul> <li><code>description</code>: A brief description of what the agent does.</li> <li><code>system_prompt</code>: A detailed prompt that defines the agent's role, capabilities, and behavior.</li> <li><code>user_prompt_template</code>: A template for the user prompt, which can include variables like <code>{content}</code>, <code>{entity_name}</code>, etc.</li> <li><code>available_tools</code>: A list of tools that the agent can use, such as <code>list_entities</code> or <code>get_entity_context</code>.</li> <li><code>requires_database</code>: A boolean indicating whether the agent needs access to the database.</li> <li><code>timeout</code>: The timeout for the agent in seconds.</li> </ul>"},{"location":"configuration/#example-agent-definition","title":"Example Agent Definition","text":"<pre><code>agents:\n  definitions:\n    my_agent:\n      description: \"A custom agent.\"\n      system_prompt: \"You are a custom agent.\"\n      user_prompt_template: \"Process this: {content}\"\n      available_tools: []\n      requires_database: false\n      timeout: 30.0\n</code></pre> <p>For more details on the agent system, see the Agent System Documentation.</p>"},{"location":"configuration/#database-settings","title":"Database Settings","text":"<ul> <li><code>database.filename</code>: DuckDB database file</li> <li><code>database.timeout</code>: Database operation timeout</li> </ul>"},{"location":"configuration/#wiki-settings","title":"Wiki Settings","text":"<ul> <li><code>wiki.file_extension</code>: File extension for wiki pages</li> <li><code>wiki.entity_directories</code>: Mapping of entity types to directories</li> </ul>"},{"location":"configuration/#git-settings","title":"Git Settings","text":"<ul> <li><code>git.auto_commit</code>: Enable automatic commits</li> <li><code>git.commit_messages</code>: Templates for commit messages</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ol> <li>Python 3.10+</li> <li>Ollama with a compatible model (e.g., gemma3, llama3.2)</li> <li>Git (for versioning)</li> </ol>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Clone the repository: <code>bash    git clone https://github.com/andjar/kultivator    cd kultivator</code></p> </li> <li> <p>Install dependencies: <code>bash    pip install -r requirements.txt</code></p> </li> <li> <p>Start Ollama (if not already running):    <code>bash    ollama serve</code></p> </li> <li> <p>Pull a compatible model: <code>bash    ollama pull gemma3    # or    ollama pull llama3.2</code></p> </li> </ol>"}]}